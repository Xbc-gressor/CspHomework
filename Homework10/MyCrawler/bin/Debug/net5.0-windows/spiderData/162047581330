<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>li-peng - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip.min.css?v=eoZATbPKwJCL5eWVDTQIYC6CIxJPcFz191dkzN2tSyQ" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/li-peng/custom.css?v=mUD8SWCQTBJKDuPESn94qrnfxi4=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip-mobile.min.css?v=lU86o8mZVn3FOSdFt7nHKYTD8gzeKaiQIIZ6lSjEFyo" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/li-peng/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/li-peng/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/li-peng/wlwmanifest.xml" />
    <script>
        var currentBlogId = 99654;
        var currentBlogApp = 'li-peng';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'darkgreentrip';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/li-peng/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/li-peng/">技术控</a>
</h1>
<h2>~山外青山楼外楼~</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/li-peng/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/li-peng">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/li-peng/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2019/11/15.html">2019年11月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/11868123.html">
    <span>
            <span>[置顶]</span>
        剖析nsq消息队列目录
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：剖析nsq消息队列(一) 简介及去中心化实现原理 剖析nsq消息队列(二) 去中心化源码解析 剖析nsq消息队列(三) 消息传输的可靠性和持久化[一] 剖析nsq消息队列(三) 消息传输的可靠性和持久化[二]diskqueue 剖析nsq消息队列(四) 消息的负载处理        <a href="https://www.cnblogs.com/li-peng/p/11868123.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-11-15 17:23
li-peng
<span data-post-id="11868123" class="post-view-count">阅读(1422)</span> 
<span data-post-id="11868123" class="post-comment-count">评论(0)</span> 
<span data-post-id="11868123" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11868123" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2019/03/13.html">2019年3月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/10522084.html">
    <span>
            <span>[置顶]</span>
        go微服务框架go-micro深度学习-目录
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&quot;go微服务框架go micro深度学习(一) 整体架构介绍&quot; &quot;go微服务框架go micro深度学习(二) 入门例子&quot; &quot;go微服务框架go micro深度学习(三) Registry服务的注册和发现&quot; &quot;go微服务框架go micro深度学习(四) rpc方法调用过程详解&quot; &quot;go微服务框架g        <a href="https://www.cnblogs.com/li-peng/p/10522084.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-03-13 11:44
li-peng
<span data-post-id="10522084" class="post-view-count">阅读(4747)</span> 
<span data-post-id="10522084" class="post-comment-count">评论(2)</span> 
<span data-post-id="10522084" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10522084" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2021/05/08.html">2021年5月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/14738098.html">
    <span>
        分解uber依赖注入库dig-源码分析
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：上一篇帖子 分解uber依赖注入库dig-使用篇 把如何使用dig进行代码示例说明，这篇帖子分析dig的源码，看他是如何实现依赖注入的。 dig实现的中心思想：所有传入Provide的函数必须要有除error外的返回参数，返回参数供其他函数的形参使用。 比如上一篇的第一个例子里，一个函数func()        <a href="https://www.cnblogs.com/li-peng/p/14738098.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-08 09:36
li-peng
<span data-post-id="14738098" class="post-view-count">阅读(58)</span> 
<span data-post-id="14738098" class="post-comment-count">评论(0)</span> 
<span data-post-id="14738098" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14738098" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/14708132.html">
    <span>
        分解uber依赖注入库dig-使用篇
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：golang的依赖注入库非常的少，好用的更是少之又少，比较好用的目前有两个 谷歌出的wire，这个是用抽象语法树在编译时实现的。 uber出的dig，在运行时，用返射实现的，并基于dig库，写了一个依赖框架fx 本系列分几部分，先对dig进行分析，第一篇介绍dig的使用，第二篇再从源码来剖析他是如何        <a href="https://www.cnblogs.com/li-peng/p/14708132.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 09:43
li-peng
<span data-post-id="14708132" class="post-view-count">阅读(113)</span> 
<span data-post-id="14708132" class="post-comment-count">评论(0)</span> 
<span data-post-id="14708132" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14708132" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2021/03/29.html">2021年3月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/14565148.html">
    <span>
        dot 语法总结
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在使用pprof分析go的项目时，经常会查看各项指标的有向图 原理是使用Graphviz(Graph Visualization Software)解析生成的dot脚本得到最终展示给我们的图信息。 dot是Graphviz用于画有向图和无向图语言，语法简单。 dot的抽象语法 [ strict ]         <a href="https://www.cnblogs.com/li-peng/p/14565148.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-29 09:46
li-peng
<span data-post-id="14565148" class="post-view-count">阅读(106)</span> 
<span data-post-id="14565148" class="post-comment-count">评论(0)</span> 
<span data-post-id="14565148" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14565148" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/12/30.html">2020年12月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/14201079.html">
    <span>
        grpc系列- protobuf详解
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Protocol Buffers 是一种与语言、平台无关，可扩展的序列化结构化数据的方法，常用于通信协议，数据存储等等。相较于 JSON、XML，它更小、更快、更简单，因此也更受开发人员的青眯。 基本语法 syntax = “proto3”; package model; service MySer        <a href="https://www.cnblogs.com/li-peng/p/14201079.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-30 13:46
li-peng
<span data-post-id="14201079" class="post-view-count">阅读(843)</span> 
<span data-post-id="14201079" class="post-comment-count">评论(4)</span> 
<span data-post-id="14201079" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14201079" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/12/15.html">2020年12月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/14136068.html">
    <span>
        c++ 解析yaml文件
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一直用c++操作`ini`做配置文件，想换成`yaml`，在全球最大的同性交友网站`github`上搜索，看有没有开源的库，功夫不负有心人，找到了[yaml-cpp](https://github.com/jbeder/yaml-cpp)，试着解析了一个`yaml`文件，给个满分。分享一下如何使用他        <a href="https://www.cnblogs.com/li-peng/p/14136068.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-15 10:33
li-peng
<span data-post-id="14136068" class="post-view-count">阅读(1402)</span> 
<span data-post-id="14136068" class="post-comment-count">评论(0)</span> 
<span data-post-id="14136068" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14136068" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/10/20.html">2020年10月20日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/13845730.html">
    <span>
        白话k8s-Pod的组成
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：k8s的所有功能都是围绕着Pod进行展开的，我们经常会看到类似这样一张图 告诉我们，Pod是一组container的集合，container之间可以通过localhost:port的方式直接访问。 感觉很神奇，明明是不同的container怎么做到共用一个IP的，在随便一个容器内通过localhos        <a href="https://www.cnblogs.com/li-peng/p/13845730.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-20 11:58
li-peng
<span data-post-id="13845730" class="post-view-count">阅读(444)</span> 
<span data-post-id="13845730" class="post-comment-count">评论(0)</span> 
<span data-post-id="13845730" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13845730" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/08/31.html">2020年8月31日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/13587910.html">
    <span>
        rust 模块组织结构
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：rust有自己的规则和约定用来组织模块，比如一个包最多可以有一个库crate，任意多个二进制crate、导入文件夹内的模块的两种约定方式... 知道这些约定，就可以快速了解rust的模块系统。 先把一些术语说明一下： 包是cargo的一个功能，当执行cargo new xxxx的时候就是创建了一个包        <a href="https://www.cnblogs.com/li-peng/p/13587910.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-31 09:34
li-peng
<span data-post-id="13587910" class="post-view-count">阅读(1814)</span> 
<span data-post-id="13587910" class="post-comment-count">评论(3)</span> 
<span data-post-id="13587910" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13587910" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/07/21.html">2020年7月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/13345307.html">
    <span>
        go test 测试用例那些事（二） mock
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：关于go的单元测试，之前有写过一篇帖子go test测试用例那些事，但是没有说go官方的库mock，很有必要单独说一下这个库,和他的实现原理。 mock主要的功能是对接口的模拟，需要在写代码的时候定义抽象很多接口，有时为了能方便go test可能会多写一些冗余代码，但这些工作会让你的单元测试更灵活。        <a href="https://www.cnblogs.com/li-peng/p/13345307.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-07-21 10:01
li-peng
<span data-post-id="13345307" class="post-view-count">阅读(993)</span> 
<span data-post-id="13345307" class="post-comment-count">评论(0)</span> 
<span data-post-id="13345307" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13345307" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/06/18.html">2020年6月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/13153569.html">
    <span>
        详说tcp粘包和半包
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：tcp服务端和客户端建立连接后会长时间维持这个连接，用于互相传递数据，tcp是以流的方式传输数据的，就像一个水管里的水一样，从一头不断的流向另一头。 理想情况下，发送的数据包都是独立的， 现实要复杂一些，发送方和接收方都有各自的缓冲区。 发送缓冲区：应用不断的把数据发送到缓冲区，系统不断的从缓冲区取        <a href="https://www.cnblogs.com/li-peng/p/13153569.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-06-18 09:38
li-peng
<span data-post-id="13153569" class="post-view-count">阅读(1139)</span> 
<span data-post-id="13153569" class="post-comment-count">评论(1)</span> 
<span data-post-id="13153569" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13153569" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/li-peng/archive/2020/05/27.html">2020年5月27日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/li-peng/p/12972016.html">
    <span>
        go模板-代码生成器
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：能用程序去做的事，就不要用手，编写自己的代码生成器就是用来解放你的双手，替你做一些重复性的工作。 上篇帖子写了模板的基础 go模板详说 ，有了基础就要做点什么东西，把所学到的东西应用起来才能更好的进步。于是用模板写了一个代码生成器，用于把数据库的表转换成go的struct，目前支持MySQL和Pos        <a href="https://www.cnblogs.com/li-peng/p/12972016.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-27 12:32
li-peng
<span data-post-id="12972016" class="post-view-count">阅读(1975)</span> 
<span data-post-id="12972016" class="post-comment-count">评论(0)</span> 
<span data-post-id="12972016" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12972016" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/li-peng/default.html?page=2">
        下一页
    </a>

    </div>    
</div>






<script>
    updatePostStats(
        $(".post-view-count").map(function () { return this.dataset.postId }).get(),
        function(id, count) { $(".post-view-count[data-post-id=" + id + "]").text("阅读(" + count + ")") },
        function(id, count) { $(".post-comment-count[data-post-id=" + id + "]").text("评论(" + count + ")") },
        function(id, count) { $(".post-digg-count[data-post-id=" + id + "]").text("推荐(" + count + ")") });
</script>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 li-peng
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? "https://" : "http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_5032359'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s11.cnzz.com/stat.php%3Fid%3D5032359%26show%3Dpic1' type='text/javascript'%3E%3C/script%3E"));</script>
    </div>

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvT8RvU1Oz2eECSCgkXcyPFh_FfQOy1fLeXZY1XG0mtJ1XLMfmgpj0HzNLL_D8riYZrkMjoHKMC2UZmArJiDiaBCJo35tU1saPD4-aVgcp6E7HaP8RTR-YWmDUZAipA02c" />
</body>
</html>
