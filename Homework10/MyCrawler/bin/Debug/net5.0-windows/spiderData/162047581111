<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>yi念之间 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/wucy/custom.css?v=Jr&#x2B;luDHHhYQVZ/m1Tbw1HfGXOlI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=OayYBbtUbH4FYkn_bTL4VVf4DsEOiTHSWhbl11KyY6Y" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/wucy/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/wucy/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/wucy/wlwmanifest.xml" />
    <script>
        var currentBlogId = 605020;
        var currentBlogApp = 'wucy';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'Custom';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        <div class="light-loading">
  <div class="box">
    <h2>加载中</h2>
    <span></span><span></span><span></span><span></span><span></span><span></span><span></span>
  </div>
</div>
    </div>
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/wucy/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/wucy/">yi念之间</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/wucy/">
首页</a>
</li>
<li>


</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/yi%E5%BF%B5%E4%B9%8B%E9%97%B4">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/wucy/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/06/12.html">2020年6月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/13096515.html">
    <span>
            <span>[置顶]</span>
        手动造轮子——基于.NetCore的RPC框架DotNetCoreRpc
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 一直以来对内部服务间使用RPC的方式调用都比较赞同,因为内部间没有这么多限制，最简单明了的方式就是最合适的方式。个人比较喜欢类似Dubbo的那种使用方式，采用和本地方法相同的方式，把接口层独立出来作为服务契约，为服务端提供服务，客户端也通过此契约调用服务。.Net平台上类似Dubbo这种相对比        <a href="https://www.cnblogs.com/wucy/p/13096515.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-06-12 13:14
yi念之间
<span data-post-id="13096515" class="post-view-count">阅读(3447)</span> 
<span data-post-id="13096515" class="post-comment-count">评论(11)</span> 
<span data-post-id="13096515" class="post-digg-count">推荐(28)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13096515" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14699717.html">
    <span>
        深入探究ASP.NET Core读取Request.Body的正确方式
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 相信大家在使用ASP.NET Core进行开发的时候，肯定会涉及到读取Request.Body的场景，毕竟我们大部分的POST请求都是将数据存放到Http的Body当中。因为笔者日常开发所使用的主要也是ASP.NET Core所以笔者也遇到这这种场景，关于本篇文章所套路的内容，来自于在开发过程        <a href="https://www.cnblogs.com/wucy/p/14699717.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 09:03
yi念之间
<span data-post-id="14699717" class="post-view-count">阅读(3187)</span> 
<span data-post-id="14699717" class="post-comment-count">评论(44)</span> 
<span data-post-id="14699717" class="post-digg-count">推荐(72)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14699717" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2021/04/12.html">2021年4月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14630008.html">
    <span>
        整合一套高性能网关Kong
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 相信大家对Api网关都比较的熟悉，我们之前的文章也介绍过ASP.NET Core的网关Ocelot，也介绍过Spring Cloud Gateway。说到网关的主要功能，其实总结起来就两个字&amp;quot;统一&amp;quot;，无论是作为应用的入口、认证授权、熔断限流等等主要都是为了统一的地方做一些事情。今天我们介绍一款        <a href="https://www.cnblogs.com/wucy/p/14630008.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-04-12 08:05
yi念之间
<span data-post-id="14630008" class="post-view-count">阅读(762)</span> 
<span data-post-id="14630008" class="post-comment-count">评论(8)</span> 
<span data-post-id="14630008" class="post-digg-count">推荐(3)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14630008" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2021/03/15.html">2021年3月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14496923.html">
    <span>
        ASP.NET Core中间件初始化探究
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 在日常使用ASP.NET Core开发的过程中我们多多少少会设计到使用中间件的场景，ASP.NET Core默认也为我们内置了许多的中间件，甚至有时候我们需要自定义中间件来帮我们处理一些请求管道过程中的处理。接下来，我们将围绕着以下几个问题来简单探究一下，关于ASP.NET Core中间件是如        <a href="https://www.cnblogs.com/wucy/p/14496923.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-03-15 07:48
yi念之间
<span data-post-id="14496923" class="post-view-count">阅读(3158)</span> 
<span data-post-id="14496923" class="post-comment-count">评论(12)</span> 
<span data-post-id="14496923" class="post-digg-count">推荐(41)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14496923" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2021/02/19.html">2021年2月19日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14401650.html">
    <span>
        NLog整合Exceptionless
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 在实际的.Net Core相关项目开发中，很多人都会把NLog作为日志框架的首选，主要是源于它的强大和它的扩展性。同时很多时候我们需要集中式的采集日志，这时候仅仅使用NLog是不够的，NLog主要是负责代码中日志的落地，也就是收集程序中的日志。类似的使用ELK(Elasticsearch+Lo        <a href="https://www.cnblogs.com/wucy/p/14401650.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-02-19 07:29
yi念之间
<span data-post-id="14401650" class="post-view-count">阅读(515)</span> 
<span data-post-id="14401650" class="post-comment-count">评论(4)</span> 
<span data-post-id="14401650" class="post-digg-count">推荐(9)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14401650" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2021/01/04.html">2021年1月4日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14222973.html">
    <span>
        ASP.NET Core Controller与IOC的羁绊
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 看到标题可能大家会有所疑问Controller和IOC能有啥羁绊，但是我还是拒绝当一个标题党的。相信有很大一部分人已经知道了这么一个结论，默认情况下ASP.NET Core的Controller并不会托管到IOC容器中，注意关键字我说的是&amp;quot;默认&amp;quot;，首先咱们不先说为什么，如果还有不知道这个结论的        <a href="https://www.cnblogs.com/wucy/p/14222973.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-01-04 07:29
yi念之间
<span data-post-id="14222973" class="post-view-count">阅读(3423)</span> 
<span data-post-id="14222973" class="post-comment-count">评论(45)</span> 
<span data-post-id="14222973" class="post-digg-count">推荐(48)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14222973" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/12/13.html">2020年12月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14125392.html">
    <span>
        .Net Core Excel导入导出神器Npoi.Mapper
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 我们在日常开发中对Excel的操作可能会比较频繁，好多功能都会涉及到Excel的操作。在.Net Core中大家可能使用Npoi比较多，这款软件功能也十分强大，而且接近原始编程。但是直接使用Npoi大部分时候我们可能都会自己封装一下，毕竟根据二八原则，我们百分之八十的场景可能都是进行简单的导入        <a href="https://www.cnblogs.com/wucy/p/14125392.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-13 23:31
yi念之间
<span data-post-id="14125392" class="post-view-count">阅读(4888)</span> 
<span data-post-id="14125392" class="post-comment-count">评论(53)</span> 
<span data-post-id="14125392" class="post-digg-count">推荐(59)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14125392" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/11/23.html">2020年11月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/14013622.html">
    <span>
        ASP.NET Core使用HostingStartup增强启动操作
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：概念 在ASP.NET Core中我们可以使用一种机制来增强启动时的操作，它就是HostingStartup。如何叫&amp;quot;增强&amp;quot;操作，相信了解过AOP概念的同学应该都非常的熟悉。我们常说AOP使用了关注点分离的方式，增强了对现有逻辑的操作。而我们今天要说的HostingStartup就是为了&amp;quot;增强&amp;quot;启动        <a href="https://www.cnblogs.com/wucy/p/14013622.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-11-23 07:28
yi念之间
<span data-post-id="14013622" class="post-view-count">阅读(2552)</span> 
<span data-post-id="14013622" class="post-comment-count">评论(14)</span> 
<span data-post-id="14013622" class="post-digg-count">推荐(26)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14013622" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/11/03.html">2020年11月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/13886728.html">
    <span>
        深入探究ASP.NET Core Startup初始化
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 Startup类相信大家都比较熟悉,在我们使用ASP.NET Core开发过程中经常用到的类，我们通常使用它进行IOC服务注册，配置中间件信息等。虽然它不是必须的，但是将这些操作统一在Startup中做处理，会在实际开发中带来许多方便。当我们谈起Startup类的时候你有没有好奇过以下几点 为        <a href="https://www.cnblogs.com/wucy/p/13886728.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-11-03 00:29
yi念之间
<span data-post-id="13886728" class="post-view-count">阅读(2887)</span> 
<span data-post-id="13886728" class="post-comment-count">评论(11)</span> 
<span data-post-id="13886728" class="post-digg-count">推荐(21)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13886728" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/10/13.html">2020年10月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/13797578.html">
    <span>
        .NET Core使用FluentEmail发送邮件
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 在实际的项目开发中，我们会遇到许多需要通过程序发送邮件的场景，比如异常报警、消息、进度通知等等。一般情况下我们使用原生的SmtpClient类库居多，它能满足我们绝大多数场景。但是使用起来不够简洁，许多场景需要我们自行封装方法去实现，而且代码量非常可观。庆幸的是，我们有一款非常棒的组件，能满足        <a href="https://www.cnblogs.com/wucy/p/13797578.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-13 01:19
yi念之间
<span data-post-id="13797578" class="post-view-count">阅读(1010)</span> 
<span data-post-id="13797578" class="post-comment-count">评论(9)</span> 
<span data-post-id="13797578" class="post-digg-count">推荐(18)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13797578" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/wucy/archive/2020/09/13.html">2020年9月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wucy/p/13642289.html">
    <span>
        ASP.NET Core整合Zipkin链路跟踪
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：前言 在日常使用ASP.NET Core的开发或学习中，如果有需要使用链路跟踪系统，大多数情况下会优先选择SkyAPM。我们之前也说过SkyAPM设计确实比较优秀，巧妙的利用DiagnosticSource诊断跟踪日志，可以做到对项目无入侵方式的集成。其实还有一款比较优秀的链路跟踪系统，也可以支持A        <a href="https://www.cnblogs.com/wucy/p/13642289.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-13 22:57
yi念之间
<span data-post-id="13642289" class="post-view-count">阅读(3141)</span> 
<span data-post-id="13642289" class="post-comment-count">评论(13)</span> 
<span data-post-id="13642289" class="post-digg-count">推荐(24)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13642289" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/wucy/default.html?page=2">
        下一页
    </a>

    </div>    
</div>






<script>
    updatePostStats(
        $(".post-view-count").map(function () { return this.dataset.postId }).get(),
        function(id, count) { $(".post-view-count[data-post-id=" + id + "]").text("阅读(" + count + ")") },
        function(id, count) { $(".post-comment-count[data-post-id=" + id + "]").text("评论(" + count + ")") },
        function(id, count) { $(".post-digg-count[data-post-id=" + id + "]").text("推荐(" + count + ")") });
</script>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 yi念之间
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjuo2_0t309vh7uRRebxI0VgNQFFugTUOYLPeXij54rs6nEXsIL1zYe4s8e70ItVKs0OnxavjMunL6OvIpaSmn4MzPaiM5ITat9uqJsdNM3HGynZtitRVl8f3Oi9ch4GvdU" />
</body>
</html>
